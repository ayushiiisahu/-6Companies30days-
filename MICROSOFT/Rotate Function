//Link : https://leetcode.com/problems/rotate-function/
/*
LOGIC
Let the array elements be: [a,b,c,d,e].

Length of array represented by N = 5
Sum of elements of array represented by SUM = a + b + c + d + e

Now, as per the question :

F(0) = (0 * a) + (1 * b) + (2 * c) + (3 * d) + (4 * e) = 0 + b + 2c + 3d + 4e = 0 + b + 2c + 3d + 4e
F(1) = (1 * a) + (2 * b) + (3 * c) + (4 * d) + (0 * e) = a + 2b + 3c + 4d + 0 = a + 2b + 3c + 4d + 0
F(2) = (2 * a) + (3 * b) + (4 * c) + (0 * d) + (1 * e) = 2a + 3b + 4c + 0 + e = 2a + 3b + 4c + 0 + e

Now subtracting 2 equations,

F(1) - F(0) = a + b + c + d - 4e = a + b + c + d + e - 5e
Therefore, F(1) = F(0) + a + b + c + d + e - 5e = F(0) + SUM - N*e

F(2) - F(1) = a + b + c + e - 4d = a + b + c + d + e - 5d

Therefore, F(2) = F(1) + a + b + c + d + e - 5d = F(1) + SUM - N*d
*/

class Solution {
public:
    int maxRotateFunction(vector<int>& nums) 
    {
        int n = nums.size();
        if(n == 1)
            return 0;

        int func = 0,max_func = 0,sum = 0;
        for(int i=0;i<n;i++)
        {
            func += (nums[i] * i);
            sum += nums[i];
        }
        
        max_func = func;
        for(int i=n-1;i>=0;i--)
        {
            func += sum - (n*nums[i]);
            max_func = max(max_func ,func);
        }
        return max_func;
    }
};

/*
Time Complexity : O(N)
Space Complexity : O(1)
*/
