//Link : 

/*-------------------- OPTIMAL-------------------*/
class Solution {
public:
   int findKthNumber(int n, int k)
    {
        int result = 1;
        for(--k; k > 0;)
        {            int count = 0;
            for (long long first = static_cast<long long>(result), last = first + 1;
                first <= n; 
                first *= 10, last *= 10) 
            {
                count += static_cast<int>((min(n + 1LL, last) - first)); 
            }
            
            if (k >= count)
            {   
                ++result;
                k -= count;
            
            else
            {   
                result *= 10;
                --k;
            }
        }
        return result;
    }
};

/*
Time Complexity : O((LOG N)^2)
Space Complexity : O(1)
*/

/*-------------------- TIME LIMIT EXCEEDED --------------------*/
class Solution {
public:
    int findKthNumber(int n, int k) 
    {
        //store the int in a string vector
        vector<string> temp;
        for(int i=1;i<=n;i++)
        {
            temp.push_back(to_string(i));
        }
        sort(temp.begin(),temp.end());
        //convert string values to int
        vector<int> temp1;
        for(int i=0;i<n;i++)
        {
            temp1.push_back(stoi(temp[i]));
        }
        return temp1[k-1];
    }
};

/*
Time Complexity : O(NLOGN)
Space Complexity : O(N)
*/
