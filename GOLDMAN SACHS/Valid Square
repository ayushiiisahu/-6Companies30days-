//Link : https://leetcode.com/problems/valid-square/

class Solution {
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) 
    {
        //distance formula = âˆš(x2-x1)^2 +(y2-y1)^2
        vector<int> dist(6);
        //find the distance from every point to the next point
        dist[0] = (p2[0]-p1[0])*(p2[0]-p1[0]) + (p2[1]-p1[1])*(p2[1]-p1[1]);
        dist[1] = (p3[0]-p1[0])*(p3[0]-p1[0]) + (p3[1]-p1[1])*(p3[1]-p1[1]);
        dist[2] = (p4[0]-p1[0])*(p4[0]-p1[0]) + (p4[1]-p1[1])*(p4[1]-p1[1]);
        dist[3] = (p3[0]-p2[0])*(p3[0]-p2[0]) + (p3[1]-p2[1])*(p3[1]-p2[1]);
        dist[4] = (p4[0]-p2[0])*(p4[0]-p2[0]) + (p4[1]-p2[1])*(p4[1]-p2[1]);
        dist[5] = (p4[0]-p3[0])*(p4[0]-p3[0]) + (p4[1]-p3[1])*(p4[1]-p3[1]);

        int sides = 0,diagnols = 0;
        int mn = dist[0];
        for(int i=1;i<6;i++)
        {
            mn = min(dist[i],mn);
        }

        //count sides and diagnols
        for(int i=0;i<6;i++)
        {
            if(dist[i] == mn)
                sides++;
            else if(dist[i] == 2*mn)
                diagnols++;
        }

        return sides==4 && diagnols==2;
    }
};

/*
Time Complexity : O(1)
Space Complexity : O(6)
*/


